require("gwsockets")
local socket = GWSockets.createWebSocket("ws://vitromod.ru:8081/")
SOCKET_OPENED = 0
OLD_MESSAGE = ""

function ReconnectToServer()
    if SOCKET_OPENED == 0 then
        socket:open()
    end
end

function WriteToSocket(msg)
    if msg == OLD_MESSAGE and msg then
        --RunConsoleCommand("say","ERROR:: ","Double message",msg)
    else
        socket:write(msg)
        RunConsoleCommand("say","WRITE :: ",msg,OLD_MESSAGE)
        OLD_MESSAGE = msg
    end
end

function socket:onMessage(txt)
    if txt == "" then
        SendSWInfo()
    end
	                                                  --    RunConsoleCommand("say","Received: ", txt)
                            GetMessageFromServer(txt)
end

function socket:onError(txt)
	                                                            print("Error: ", txt)
end

function socket:onConnected()
	                                                            print("Connected to server")
	                                                            socket:write("Connected [metropacksrv]!")
    SOCKET_OPENED = 1
                            timer.Simple( 1, function()
                                OLD_MESSAGE = "" 
                                SendSWInfo()
                                print("sendswinfo")
                                --RunConsoleCommand("say","SWINFO")
                            end )
end

function socket:onDisconnected()
	                                                            RunConsoleCommand("say","ERROR :: ","WebSocket disconnected")
                                                          SOCKET_OPENED = 0
                                                          ReconnectToServer()
end

function socket:onError()
	                                                            RunConsoleCommand("say","ERROR :: ",errMessage)
end

ReconnectToServer()



local bin2hex = {
["0000"] = "0",
["0001"] = "1",
["0010"] = "2",
["0011"] = "3",
["0100"] = "4",
["0101"] = "5",
["0110"] = "6",
["0111"] = "7",
["1000"] = "8",
["1001"] = "9",
["1010"] = "A",
["1011"] = "B",
["1100"] = "C",
["1110"] = "E",
["1111"] = "F"
}

function Bin2Hex(s)
    local l = 0
    local h = ""
    local b = ""
    local rem
    l = string.len(s)
    rem = l % 4
    l = l-1
    h = ""
    if (rem > 0) then
    s = string.rep("0", 4 - rem)..s
    end
    for i = 1, l, 4 do
    b = string.sub(s, i, i+3)
    h = h..bin2hex[b]
    end
    return(h)
end

RCMassiveInMap = {
    DM = "00000000000000000000000000000000000000000000000000",
    IK = 00,
    OK = 00,
    MS = 00
}

SWMassiveInMap = {
    DM = "00000000000000000000000000000000000000000000000000",
    IK = 00,
    OK = 00,
    MS = 00
}

RCTriggerNamesInMap = {
    DM = {"DEPOT_RC_1sp",
        "DEPOT_RC_3sp",
        "DEPOT_RC_5sp",
        "DEPOT_RC_7sp",
        "DEPOT_RC_9sp",
        "DEPOT_RC_11sp",
        "DEPOT_RC_13sp",
        "DEPOT_RC_15sp",
        "DEPOT_RC_17sp",
        "DEPOT_RC_19sp",
        "DEPOT_RC_21sp",
        "DEPOT_RC_23sp",
        "DEPOT_RC_25sp",
        "DEPOT_RC_27sp",
        "DEPOT_RC_29sp",
        "DEPOT_RC_33p",
        "DEPOT_RC_35p",
        "DEPOT_RC_37p",
        "DEPOT_RC_39p",
        "DEPOT_RC_47p",
        "DEPOT_RC_49sp",
        "DEPOT_RC_49p",
        "DEPOT_RC_51sp",
        "DEPOT_RC_2sp",
        "DEPOT_RC_4sp",
        "DEPOT_RC_6sp",
        "DEPOT_RC_8sp",
        "DEPOT_RC_10sp",
        "DEPOT_RC_12sp",
        "DEPOT_RC_14sp",
        "DEPOT_RC_16sp",
        "DEPOT_RC_18sp",
        "DEPOT_RC_20sp",
        "DEPOT_RC_22sp",
        "DEPOT_RC_24sp",
        "DEPOT_RC_26sp",
        "DEPOT_RC_28sp",
        "DEPOT_RC_30sp",
        "DEPOT_RC_32sp",
        "DEPOT_RC_34sp",
        "DEPOT_RC_36sp",
        "DEPOT_RC_38sp",
        "DEPOT_RC_40sp",
        "DEPOT_RC_40p",
        "DEPOT_RC_34p",
        "DEPOT_RC_36p",
        "DEPOT_RC_48p",
        "DEPOT_RC_50p",
        "DEPOT_RC_56p",
        "DEPOT_RC_tp"},
    IK = {
        "DEPOT_RC_4448p",
    }
}

RCSwitchNamesInMap = {
    DM = {
        "trackswitch_d1",
        "trackswitch_d2",
        "trackswitch_d5",
        "trackswitch_d7",
        "trackswitch_d9",
        "trackswitch_d10",
        "trackswitch_d56",
        "trackswitch_d51",
        "trackswitch_d13",
        "trackswitch_d15",
        "trackswitch_d17",
        "trackswitch_d19",
        "trackswitch_d21",
        "trackswitch_d23",
        "trackswitch_d25",
        "trackswitch_d27",
        "trackswitch_d29",
        "trackswitch_d49",
        "trackswitch_d14",
        "trackswitch_d16",
        "trackswitch_d18",
        "trackswitch_d20",
        "trackswitch_d22",
        "trackswitch_d24",
        "trackswitch_d26",
        "trackswitch_d28",
        "trackswitch_d30",
        "trackswitch_d32",
        "trackswitch_d34",
        "trackswitch_d36",
        "trackswitch_d40"},
    IK = {
        "trackswitch_i1",
    }
}

function SendRCInfo(ACTIVATOR,CALLER,INFO)
    for k,v in pairs(RCTriggerNamesInMap) do
        for k1,v1 in pairs(v) do
            if v1 == CALLER:GetName() then
                RCMassiveInMap[k] = string.SetChar(RCMassiveInMap[k], k1, INFO)
                --RunConsoleCommand("say",k.."RC"..Bin2Hex(RCMassiveInMap[k]),RCMassiveInMap[k],CALLER:GetName())
                if SOCKET_OPENED == 1 then
                    socket:write("RC"..k..Bin2Hex(RCMassiveInMap[k]))
                    RunConsoleCommand("say",RCMassiveInMap[k])
                end
            end
        end
    end
end

function SendSWInfo()
    in4 = "_"
    in5 = {}
    in6 = {}
    str01 = "0000000000000000000000000000000000000000000000000000000000000000"
    for k, v in pairs (RCSwitchNamesInMap.DM) do
        for k1, v1 in pairs(ents.FindByName(v)) do
            if in4 ~= v1:GetName() then
                in4 = v1:GetName() -- -- --
               -- RunConsoleCommand("say",v1:GetSaveTable().m_eDoorState)
                if v1:GetSaveTable().m_eDoorState == 2 then -- open
                    table.insert(in5,{tonumber(string.sub(in4, 14, -1 )), 1})
                    table.insert(in6,{tonumber(string.sub(in4, 14, -1 )), 0})
                elseif v1:GetSaveTable().m_eDoorState == 0 then -- close
                    table.insert(in6,{tonumber(string.sub(in4, 14, -1 )), 1})
                    table.insert(in5,{tonumber(string.sub(in4, 14, -1 )), 0})
                elseif v1:GetSaveTable().m_eDoorState == 1 or v1:GetSaveTable().m_eDoorState == 3 then -- no ctrl
                    table.insert(in5,{tonumber(string.sub(in4, 14, -1 )), 0})
                    table.insert(in6,{tonumber(string.sub(in4, 14, -1 )), 0})
                end
            end
        end
    end
    for k1, v1 in pairs(in5) do
        str01 = string.SetChar(str01, (k1 * 2)-1, v1[2])
         
    end    
    for k1, v1 in pairs(in6) do
       
        --if k1 ~= 1 then
            str01 = string.SetChar(str01, (k1 * 2), v1[2])
            --RunConsoleCommand("say",(k1 * 2))
        --end
    end   
    WriteToSocket("SWDM"..Bin2Hex(str01))
    --RunConsoleCommand("say",str01,"bbb")
end

function GetMessageFromServer(msg1)
    --SendSWInfo()
  --  RunConsoleCommand("say","MESSAGE :: ",msg1)
    msg2 = string.Split( msg1, ";" )
    for k0,msg in pairs(msg2) do
        if msg[1] == "S" and msg[2] == "W" then
            RunConsoleCommand("say",msg,string.sub(msg, 5, -2),string.sub(msg, -1, -1))
            if msg[3] == "D" then
                local change_sw = 0
                local number_sw = "trackswitch_d"..string.sub( msg, 5, -2)
                --RunConsoleCommand("say",number_sw)
                if string.sub( msg, -1, -1) == "+" then
                    change_sw = 1
                else
                    change_sw = 0
                end
                for k, v in ipairs( ents.FindByClass( "prop_door_rotating" ) ) do
 	                              if v:GetName() == number_sw then
                        if string.sub( msg, -1, -1) == "+" then
                            v:Fire("Open")
                            timer.Simple( 0.2, function() 
                                SendSWInfo()
                                --RunConsoleCommand("say","SWINFO")
                            end )
                        else
                            v:Fire("Close")
                            timer.Simple( 0.2, function() 
                                SendSWInfo()
                                --RunConsoleCommand("say","SWINFO")
                            end )
                        end
                    end
                end
    
                --RunConsoleCommand("say",number_sw,change_sw)
            end
        end
    end
    
end
